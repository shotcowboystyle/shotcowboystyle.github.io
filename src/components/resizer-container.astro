---
const { class: className } = Astro.props;
---

<div class:list={['container', className]}>
	<div
		class="resizable"
		id="resize-me"
	>
		<slot />
		<div class="resizer resizer-r"></div>
		<div class="resizer resizer-b"></div>
	</div>
</div>

<script>
	document.addEventListener('astro:page-load', () => {
		const el = document.getElementById('resize-me');
		if (!el) {
			return;
		}

		// The current position of mouse/touch
		let cx = 0;

		// The dimension of the element
		let w = 0;

		function onTouchDown(e: TouchEvent) {
			onDown(e.touches[0]);
			e.preventDefault();
		}

		function onTouchMove(e: TouchEvent) {
			onMove(e.touches[0], true);
		}

		function onTouchEnd(e: TouchEvent) {
			if (e.touches.length == 0) {
				onUp();
			}
		}

		const onMove = (e: MouseEvent | Touch, isTouchEvent: boolean = false) => {
			// How far the mouse has been moved
			const dx = e.clientX - cx;

			const minWidth = isTouchEvent ? 327 : 654;
			if (w + dx <= minWidth) {
				el.style.width = `${minWidth}px`;
				document.body.classList.add('is-resize-limit');
			} else {
				el.style.width = `${w + dx}px`;
				if (document.body.classList.contains('is-resize-limit')) {
					document.body.classList.remove('is-resize-limit');
				}
			}
		};

		// Handle the mousedown event
		// that's triggered when user drags the resizer
		const onDown = (e: MouseEvent | Touch) => {
			// Get the current mouse position
			cx = e.clientX;

			// Calculate the dimension of element
			const styles = window.getComputedStyle(el);
			w = parseInt(styles.width, 10);

			// Attach the listeners to document
			document.addEventListener('mousemove', onMove);
			document.addEventListener('mouseup', onUp);
			document.addEventListener('touchmove', onTouchMove);
			document.addEventListener('touchend', onTouchEnd);
		};

		const onUp = () => {
			// Remove the handlers of mousemove and mouseup
			document.removeEventListener('mousemove', onMove);
			document.removeEventListener('mouseup', onUp);
			document.removeEventListener('touchmove', onTouchMove);
			document.removeEventListener('touchend', onTouchEnd);
		};

		// Query all resizers
		const resizers = el.querySelectorAll('.resizer');

		// Loop over them
		[].forEach.call(resizers, (resizer: HTMLElement) => {
			resizer.addEventListener('mousedown', onDown);
			resizer.addEventListener('touchstart', onTouchDown);
		});
	});
</script>

<style>
	.resizable {
		@apply relative w-full items-center justify-center border border-gray-300;
	}

	.resizer {
		@apply absolute;
	}

	/* Placed at the right side */
	.resizer-r {
		@apply right-0 top-0 h-full w-1 cursor-col-resize;
	}

	/* Placed at the bottom side */
	.resizer-b {
		@apply bottom-0 left-0 h-1 w-full cursor-row-resize;
	}

	/* Optional styles */
	.container {
		@apply min-h-fit p-4;
	}
</style>
