---
import BackToHomeButton from '@/components/back-to-home-button.astro';
import GameLayout from '@/layouts/game.astro';
---

<GameLayout>
	<Fragment slot="head-scripts">
		<meta name="viewport" content="width=device-width,user-scalable=no" />
	</Fragment>

	<BackToHomeButton />

	<div id="container">
		<div id="game"></div>
		<div id="score">0</div>
		<div id="instructions">Click (or press the space bar) to place the block</div>
		<div class="game-over">
			<h2>Game Over</h2>
			<p>You did great, you're the best.</p>
			<p>Click or space bar to start again</p>
		</div>

		<div class="game-ready">
			<div>
				<h1 id="start-message">Incase you were bored</h1>
				<button type="button" id="start-button"> Start</button>
			</div>
			<div></div>
		</div>
	</div>
</GameLayout>

<script>
	import * as CANNON from 'cannon';
	import * as THREE from 'three';

	type BlockPlane = 'x' | 'y' | 'z';
	interface GeneratedBlock {
		threejs: THREE.Mesh;
		cannonjs: CANNON.Body;
		width: number;
		depth: number;
		direction?: BlockPlane;
	}

	const BOX_HEIGHT = 1; // Height of each layer
	const ORIGINAL_BOX_SIZE = 3; // Original width and height of a box
	const GAME_STATES = {
		LOADING: 'loading',
		PLAYING: 'playing',
		READY: 'ready',
		ENDED: 'ended',
		RESETTING: 'resetting',
	};

	// ThreeJS globals
	let camera: THREE.OrthographicCamera;
	let scene: THREE.Scene;
	let renderer: THREE.WebGLRenderer;

	let world: CANNON.World; // CannonJs world
	let lastTime: number; // Last timestamp of animation
	let stack: GeneratedBlock[]; // Parts that stay solid on top of each other
	let overhangs: GeneratedBlock[]; // Overhanging parts that fall down
	let gameState: (typeof GAME_STATES)[keyof typeof GAME_STATES];

	const pageContainerElement = document.getElementById('container');
	const gameContainerElement = document.getElementById('game');
	const scoreElement = document.getElementById('score');
	const instructionsElement = document.getElementById('instructions');
	const startButton = document.getElementById('start-button');

	function generateBlock(
		x: number,
		y: number,
		z: number,
		width: number,
		depth: number,
		falls: boolean,
	): GeneratedBlock {
		// ThreeJS
		const geometry = new THREE.BoxGeometry(width, BOX_HEIGHT, depth);
		const color = new THREE.Color(`hsl(${30 + stack.length * 4}, 100%, 50%)`);
		const material = new THREE.MeshLambertMaterial({ color });
		const mesh = new THREE.Mesh(geometry, material);
		mesh.position.set(x, y, z);
		scene.add(mesh);

		// CannonJS
		const shape = new CANNON.Box(new CANNON.Vec3(width / 2, BOX_HEIGHT / 2, depth / 2));

		let mass = falls ? 5 : 0; // If it shouldn't fall then setting the mass to zero will keep it stationary
		mass *= width / ORIGINAL_BOX_SIZE; // Reduce mass proportionately by size
		mass *= depth / ORIGINAL_BOX_SIZE; // Reduce mass proportionately by size

		const body = new CANNON.Body({ mass, shape });
		body.position.set(x, y, z);
		world.addBody(body);

		return {
			threejs: mesh,
			cannonjs: body,
			width,
			depth,
		};
	}

	function addLayer(x: number, z: number, width: number, depth: number, direction?: BlockPlane) {
		const y = BOX_HEIGHT * stack.length; // Add the new box one layer higher
		const layer = generateBlock(x, y, z, width, depth, false);
		layer.direction = direction;
		stack.push(layer);

		if (stack.length >= 5) {
			instructionsElement?.classList.add('hide');
		}
	}

	function addOverhang(x: number, z: number, width: number, depth: number) {
		const y = BOX_HEIGHT * (stack.length - 1); // Add the new box one the same layer
		const overhang = generateBlock(x, y, z, width, depth, true);
		overhangs.push(overhang);
	}

	function missedTheSpot() {
		const topLayer = stack[stack.length - 1];

		// Turn to top layer into an overhang and let it fall down
		addOverhang(
			topLayer.threejs.position.x,
			topLayer.threejs.position.z,
			topLayer.width,
			topLayer.depth,
		);
		world.remove(topLayer.cannonjs);
		scene.remove(topLayer.threejs);

		updateState(GAME_STATES.ENDED);
	}

	function updatePhysics(timePassed: number) {
		world.step(timePassed / 1000); // Step the physics world

		// Copy coordinates from Cannon.js to Three.js
		overhangs.forEach((element) => {
			element.threejs.position.copy({ ...element.cannonjs.position } as THREE.Vector3);
			element.threejs.quaternion.copy({ ...element.cannonjs.quaternion } as THREE.Quaternion);
		});
	}

	function animation(time: number) {
		if (lastTime) {
			const timePassed = time - lastTime;
			const speed = 0.005;

			const topLayer = stack[stack.length - 1];

			// The top level box should move if the game has not ended AND
			// it's either NOT in autopilot or it is in autopilot and the box did not yet reach the robot position
			const boxShouldMove = gameState !== GAME_STATES.ENDED;

			if (boxShouldMove) {
				// Keep the position visible on UI and the position in the model in sync
				topLayer.threejs.position[topLayer.direction as BlockPlane] += speed * timePassed;
				topLayer.cannonjs.position[topLayer.direction as BlockPlane] += speed * timePassed;

				// If the box went beyond the stack then show up the fail screen
				if (topLayer.threejs.position[topLayer.direction as BlockPlane] > 10) {
					missedTheSpot();
				}
			} else {
			}

			// 4 is the initial camera height
			if (camera.position.y < BOX_HEIGHT * (stack.length - 2) + 4) {
				camera.position.y += speed * timePassed;
			}

			updatePhysics(timePassed);
			renderer.render(scene, camera);
		}

		lastTime = time;
	}

	function updateState(newState: string) {
		for (let key in GAME_STATES) {
			pageContainerElement?.classList.remove(GAME_STATES[key as keyof typeof GAME_STATES]);
		}

		pageContainerElement?.classList.add(newState);
		gameState = newState;
	}

	function init() {
		lastTime = 0;
		stack = [];
		overhangs = [];

		// Initialize CannonJS
		world = new CANNON.World();
		world.gravity.set(0, -10, 0); // Gravity pulls things down
		world.broadphase = new CANNON.NaiveBroadphase();
		world.solver.iterations = 40;

		// Initialize ThreeJs
		const aspect = window.innerWidth / window.innerHeight;
		const width = 20;
		const height = width / aspect;

		camera = new THREE.OrthographicCamera(
			width / -2, // left
			width / 2, // right
			height / 2, // top
			height / -2, // bottom
			-100, // near plane
			1000, // far plane
		);

		/*
		// If you want to use perspective camera instead, uncomment these lines
		camera = new THREE.PerspectiveCamera(
			45, // field of view
			aspect, // aspect ratio
			1, // near plane
			100 // far plane
		);
		*/

		camera.position.set(4, 4, 4);
		camera.lookAt(0, 0, 0);

		scene = new THREE.Scene();

		// Foundation
		addLayer(0, 0, ORIGINAL_BOX_SIZE, ORIGINAL_BOX_SIZE);

		// Set up lights
		const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
		scene.add(ambientLight);

		const dirLight = new THREE.DirectionalLight(0xffffff, 0.6);
		dirLight.position.set(10, 20, 0);
		scene.add(dirLight);

		// Set up renderer
		if (gameContainerElement) {
			renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });
			renderer.setSize(window.innerWidth, window.innerHeight);
			renderer.setClearColor('#D0CBC7', 1);
			renderer.setAnimationLoop(animation);
			gameContainerElement.appendChild(renderer.domElement);

			updateState(GAME_STATES.READY);
		}
	}

	function cutBox(topLayer: GeneratedBlock, overlap: number, size: number, delta: number) {
		const direction = topLayer.direction;
		const newWidth = direction === 'x' ? overlap : topLayer.width;
		const newDepth = direction === 'z' ? overlap : topLayer.depth;

		// Update metadata
		topLayer.width = newWidth;
		topLayer.depth = newDepth;

		// Update ThreeJS model
		topLayer.threejs.scale[direction as BlockPlane] = overlap / size;
		topLayer.threejs.position[direction as BlockPlane] -= delta / 2;

		// Update CannonJS model
		topLayer.cannonjs.position[direction as BlockPlane] -= delta / 2;

		// Replace shape to a smaller one (in CannonJS you can't simply just scale a shape)
		const shape = new CANNON.Box(new CANNON.Vec3(newWidth / 2, BOX_HEIGHT / 2, newDepth / 2));

		topLayer.cannonjs.shapes = [];
		topLayer.cannonjs.addShape(shape);
	}

	function splitBlockAndAddNextOneIfOverlaps() {
		if (gameState === GAME_STATES.ENDED) {
			return;
		}

		const topLayer = stack[stack.length - 1];
		const previousLayer = stack[stack.length - 2];

		const direction = topLayer.direction;

		const size = direction === 'x' ? topLayer.width : topLayer.depth;
		const delta =
			topLayer.threejs.position[direction as BlockPlane] -
			previousLayer.threejs.position[direction as BlockPlane];
		const overhangSize = Math.abs(delta);
		const overlap = size - overhangSize;

		if (overlap > 0) {
			cutBox(topLayer, overlap, size, delta);

			// Overhang
			const overhangShift = (overlap / 2 + overhangSize / 2) * Math.sign(delta);
			const overhangX =
				direction === 'x'
					? topLayer.threejs.position.x + overhangShift
					: topLayer.threejs.position.x;
			const overhangZ =
				direction === 'z'
					? topLayer.threejs.position.z + overhangShift
					: topLayer.threejs.position.z;
			const overhangWidth = direction === 'x' ? overhangSize : topLayer.width;
			const overhangDepth = direction === 'z' ? overhangSize : topLayer.depth;

			addOverhang(overhangX, overhangZ, overhangWidth, overhangDepth);

			// Next layer
			const nextX = direction === 'x' ? topLayer.threejs.position.x : -10;
			const nextZ = direction === 'z' ? topLayer.threejs.position.z : -10;
			const newWidth = topLayer.width; // New layer has the same size as the cut top layer
			const newDepth = topLayer.depth; // New layer has the same size as the cut top layer
			const nextDirection = direction === 'x' ? 'z' : 'x';

			if (scoreElement) {
				scoreElement.innerText = String(stack.length - 1);
			}

			addLayer(nextX, nextZ, newWidth, newDepth, nextDirection);
		} else {
			missedTheSpot();
		}
	}

	function startGame() {
		updateState(GAME_STATES.PLAYING);
		lastTime = 0;
		stack = [];
		overhangs = [];

		if (scoreElement) {
			scoreElement.innerText = '0';
		}

		if (world) {
			// Remove every object from world
			while (world.bodies.length > 0) {
				world.remove(world.bodies[0]);
			}
		}

		if (scene) {
			// Remove every Mesh from the scene
			while (scene.children.find((c) => c.type === 'Mesh')) {
				const mesh = scene.children.find((c) => c.type === 'Mesh');
				scene.remove(mesh!);
			}

			// Foundation
			addLayer(0, 0, ORIGINAL_BOX_SIZE, ORIGINAL_BOX_SIZE);

			// First layer
			addLayer(-10, 0, ORIGINAL_BOX_SIZE, ORIGINAL_BOX_SIZE, 'x');
		}

		if (camera) {
			// Reset camera positions
			camera.position.set(4, 4, 4);
			camera.lookAt(0, 0, 0);
		}

		updateState(GAME_STATES.PLAYING);
	}

	document.addEventListener('astro:page-load', () => {
		init();

		startButton?.addEventListener('click', startGame);
		window.addEventListener('touchstart', splitBlockAndAddNextOneIfOverlaps);
		window.addEventListener('keydown', function (event) {
			if (event.key === ' ' || event.code === 'Space') {
				event.preventDefault();
				if ([GAME_STATES.READY, GAME_STATES.ENDED].includes(gameState)) {
					startGame();
				} else {
					splitBlockAndAddNextOneIfOverlaps();
				}
				return;
			}
		});

		window.addEventListener('resize', () => {
			// Adjust camera
			const aspect = window.innerWidth / window.innerHeight;
			const width = 20;
			const height = width / aspect;

			camera.top = height / 2;
			camera.bottom = height / -2;

			// Reset renderer
			renderer.setSize(window.innerWidth, window.innerHeight);
			renderer.render(scene, camera);
		});
	});
</script>

<style>
	#container {
		@apply h-full w-full;
	}

	#container #score {
		@apply absolute top-0 w-full text-center font-sans-serif text-base-content;

		font-size: 10vh;
	}

	#container #game {
		@apply absolute inset-0;
	}

	#container .game-over {
		@apply absolute left-0 top-0 flex h-3/5 w-full flex-col items-center justify-center;
	}

	#container .game-over * {
		@apply font-sans text-base-content opacity-0;

		transition:
			opacity 0.5s ease,
			transform 0.5s ease;
		transform: translateY(-50px);
	}

	#container .game-over h2 {
		@apply m-0 p-0 font-sans-serif text-6xl;
	}

	#container .game-ready {
		@apply absolute left-0 top-0 flex h-full w-full flex-col items-center justify-around;
	}

	#container .game-ready #start-message,
	#container .game-ready #start-button {
		@apply mx-auto my-3 w-full text-center text-base-content opacity-0 text-3xl;

		transition:
			opacity 0.5s ease,
			transform 0.5s ease;
		transform: translateY(-50px);
	}

	#container .game-ready #start-button {
		@apply border-4 border-base-content bg-transparent px-4 py-2;
	}

	#container #instructions {
		@apply absolute left-0 top-1/4 w-full text-center opacity-0;

		transition:
			opacity 0.5s ease,
			transform 0.5s ease;

		/* top: 16vh; */
	}

	#container #instructions.hide {
		@apply !opacity-0;
	}

	#container.playing #score,
	#container.resetting #score {
		transform: translateY(0) scale(1);
	}

	#container.playing #instructions {
		@apply opacity-100;
	}

	#container.ready .game-ready #start-message,
	#container.ready .game-ready #start-button {
		@apply opacity-100;

		transform: translateY(0);
	}

	#container.ended #score {
		transform: translateY(6vh) scale(1.5);
	}

	#container.ended .game-over * {
		@apply opacity-100;

		transform: translateY(0);
	}

	#container.ended .game-over p {
		transition-delay: 0.3s;
	}
</style>
